{"abi":[{"type":"function","name":"checkLiquidation","inputs":[{"name":"liquidator","type":"address","internalType":"address"},{"name":"violator","type":"address","internalType":"address"},{"name":"collateral","type":"address","internalType":"address"}],"outputs":[{"name":"maxRepay","type":"uint256","internalType":"uint256"},{"name":"maxYield","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"liquidate","inputs":[{"name":"violator","type":"address","internalType":"address"},{"name":"collateral","type":"address","internalType":"address"},{"name":"repayAssets","type":"uint256","internalType":"uint256"},{"name":"minYieldBalance","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"checkLiquidation(address,address,address)":"88aa6f12","liquidate(address,address,uint256,uint256)":"c1342574"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"violator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"checkLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxYield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"violator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minYieldBalance\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkLiquidation(address,address,address)\":{\"params\":{\"collateral\":\"Collateral which is to be seized\",\"liquidator\":\"Address that will initiate the liquidation\",\"violator\":\"Address that may be in collateral violation\"},\"returns\":{\"maxRepay\":\"Max amount of debt that can be repaid, in asset units\",\"maxYield\":\"Yield in collateral corresponding to max allowed amount of debt to be repaid, in collateral balance (shares for vaults)\"}},\"liquidate(address,address,uint256,uint256)\":{\"details\":\"If `repayAssets` is set to max uint256 it is assumed the caller will perform their own slippage checks to make sure they are not taking on too much debt. This option is mainly meant for smart contract liquidators\",\"params\":{\"collateral\":\"Collateral which is to be seized\",\"minYieldBalance\":\"The minimum acceptable amount of collateral to be transferred from violator to sender, in collateral balance units (shares for vaults).  Meant as slippage check together with `repayAssets`\",\"repayAssets\":\"The amount of underlying debt to be transferred from violator to sender, in asset units (use max uint256 to repay the maximum possible amount). Meant as slippage check together with `minYieldBalance`\",\"violator\":\"Address that may be in collateral violation\"}}},\"title\":\"ILiquidation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkLiquidation(address,address,address)\":{\"notice\":\"Checks to see if a liquidation would be profitable, without actually doing anything\"},\"liquidate(address,address,uint256,uint256)\":{\"notice\":\"Attempts to perform a liquidation\"}},\"notice\":\"Interface of the EVault's Liquidation module\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/euler-vault-kit/src/EVault/IEVault.sol\":\"ILiquidation\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":ethereum-vault-connector/=lib/ethereum-vault-connector/src/\",\":euler-vault-kit/=lib/euler-vault-kit/\",\":evc/=lib/ethereum-vault-connector/src/\",\":evk-test/=lib/euler-vault-kit/test/\",\":evk/=lib/euler-vault-kit/src/\",\":forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/euler-vault-kit/lib/permit2/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/\"]},\"sources\":{\"lib/ethereum-vault-connector/src/interfaces/IVault.sol\":{\"keccak256\":\"0xb04fe66deccf8baa3e5c850f2ecf32e948393d7a42e78b59b037141b205edf42\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://11acaad66e9a42deec1f9328abe9f2662bfb109568baa20a79317ae707b94016\",\"dweb:/ipfs/QmQbAtvrk9cqXJJZgMRjdxrMDXiZPz37m6PGZYEpbtN8to\"]},\"lib/euler-vault-kit/src/EVault/IEVault.sol\":{\"keccak256\":\"0x1e41f0fe57683c65b27afa6b725ee2c68128b540f682bba93e2dc135522ac6b3\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://86bb1872eb9073214b853663fb136157bea709bbcf626bb0a2bb2748a43f941d\",\"dweb:/ipfs/QmSWQPjHBBahLM3AsoVjHHYEBiBj8WbkQqCQLPNUJVMX1k\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"liquidator","type":"address"},{"internalType":"address","name":"violator","type":"address"},{"internalType":"address","name":"collateral","type":"address"}],"stateMutability":"view","type":"function","name":"checkLiquidation","outputs":[{"internalType":"uint256","name":"maxRepay","type":"uint256"},{"internalType":"uint256","name":"maxYield","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"violator","type":"address"},{"internalType":"address","name":"collateral","type":"address"},{"internalType":"uint256","name":"repayAssets","type":"uint256"},{"internalType":"uint256","name":"minYieldBalance","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"liquidate"}],"devdoc":{"kind":"dev","methods":{"checkLiquidation(address,address,address)":{"params":{"collateral":"Collateral which is to be seized","liquidator":"Address that will initiate the liquidation","violator":"Address that may be in collateral violation"},"returns":{"maxRepay":"Max amount of debt that can be repaid, in asset units","maxYield":"Yield in collateral corresponding to max allowed amount of debt to be repaid, in collateral balance (shares for vaults)"}},"liquidate(address,address,uint256,uint256)":{"details":"If `repayAssets` is set to max uint256 it is assumed the caller will perform their own slippage checks to make sure they are not taking on too much debt. This option is mainly meant for smart contract liquidators","params":{"collateral":"Collateral which is to be seized","minYieldBalance":"The minimum acceptable amount of collateral to be transferred from violator to sender, in collateral balance units (shares for vaults).  Meant as slippage check together with `repayAssets`","repayAssets":"The amount of underlying debt to be transferred from violator to sender, in asset units (use max uint256 to repay the maximum possible amount). Meant as slippage check together with `minYieldBalance`","violator":"Address that may be in collateral violation"}}},"version":1},"userdoc":{"kind":"user","methods":{"checkLiquidation(address,address,address)":{"notice":"Checks to see if a liquidation would be profitable, without actually doing anything"},"liquidate(address,address,uint256,uint256)":{"notice":"Attempts to perform a liquidation"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","ethereum-vault-connector/=lib/ethereum-vault-connector/src/","euler-vault-kit/=lib/euler-vault-kit/","evc/=lib/ethereum-vault-connector/src/","evk-test/=lib/euler-vault-kit/test/","evk/=lib/euler-vault-kit/src/","forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/","permit2/=lib/euler-vault-kit/lib/permit2/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/euler-vault-kit/src/EVault/IEVault.sol":"ILiquidation"},"evmVersion":"prague","libraries":{}},"sources":{"lib/ethereum-vault-connector/src/interfaces/IVault.sol":{"keccak256":"0xb04fe66deccf8baa3e5c850f2ecf32e948393d7a42e78b59b037141b205edf42","urls":["bzz-raw://11acaad66e9a42deec1f9328abe9f2662bfb109568baa20a79317ae707b94016","dweb:/ipfs/QmQbAtvrk9cqXJJZgMRjdxrMDXiZPz37m6PGZYEpbtN8to"],"license":"GPL-2.0-or-later"},"lib/euler-vault-kit/src/EVault/IEVault.sol":{"keccak256":"0x1e41f0fe57683c65b27afa6b725ee2c68128b540f682bba93e2dc135522ac6b3","urls":["bzz-raw://86bb1872eb9073214b853663fb136157bea709bbcf626bb0a2bb2748a43f941d","dweb:/ipfs/QmSWQPjHBBahLM3AsoVjHHYEBiBj8WbkQqCQLPNUJVMX1k"],"license":"GPL-2.0-or-later"}},"version":1},"id":2}