{"abi":[{"type":"function","name":"accountLiquidity","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"liquidation","type":"bool","internalType":"bool"}],"outputs":[{"name":"collateralValue","type":"uint256","internalType":"uint256"},{"name":"liabilityValue","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"accountLiquidityFull","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"liquidation","type":"bool","internalType":"bool"}],"outputs":[{"name":"collaterals","type":"address[]","internalType":"address[]"},{"name":"collateralValues","type":"uint256[]","internalType":"uint256[]"},{"name":"liabilityValue","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"checkAccountStatus","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"collaterals","type":"address[]","internalType":"address[]"}],"outputs":[{"name":"","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"checkVaultStatus","inputs":[],"outputs":[{"name":"","type":"bytes4","internalType":"bytes4"}],"stateMutability":"nonpayable"},{"type":"function","name":"disableController","inputs":[],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"accountLiquidity(address,bool)":"a824bf67","accountLiquidityFull(address,bool)":"c7b0e3a3","checkAccountStatus(address,address[])":"b168c58f","checkVaultStatus()":"4b3d1223","disableController()":"869e50c7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"liquidation\",\"type\":\"bool\"}],\"name\":\"accountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liabilityValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"liquidation\",\"type\":\"bool\"}],\"name\":\"accountLiquidityFull\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"collaterals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralValues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"liabilityValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"collaterals\",\"type\":\"address[]\"}],\"name\":\"checkAccountStatus\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVaultStatus\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountLiquidity(address,bool)\":{\"params\":{\"account\":\"Account holding debt in this vault\",\"liquidation\":\"Flag to indicate if the calculation should be performed in liquidation vs account status check mode, where different LTV values might apply.\"},\"returns\":{\"collateralValue\":\"Total risk adjusted value of all collaterals in unit of account\",\"liabilityValue\":\"Value of debt in unit of account\"}},\"accountLiquidityFull(address,bool)\":{\"params\":{\"account\":\"Account holding debt in this vault\",\"liquidation\":\"Flag to indicate if the calculation should be performed in liquidation vs account status check mode, where different LTV values might apply.\"},\"returns\":{\"collateralValues\":\"Array of risk adjusted collateral values corresponding to items in collaterals array. In unit of account\",\"collaterals\":\"Array of collaterals enabled\",\"liabilityValue\":\"Value of debt in unit of account\"}},\"checkAccountStatus(address,address[])\":{\"details\":\"Only callable by EVC during status checks\",\"params\":{\"account\":\"The address of the account to be checked\"},\"returns\":{\"_0\":\"magicValue Must return the bytes4 magic value 0xb168c58f (which is a selector of this function) when account status is valid, or revert otherwise.\"}},\"checkVaultStatus()\":{\"details\":\"Only callable by EVC during status checks\",\"returns\":{\"_0\":\"magicValue Must return the bytes4 magic value 0x4b3d1223 (which is a selector of this function) when account status is valid, or revert otherwise.\"}}},\"title\":\"IRiskManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountLiquidity(address,bool)\":{\"notice\":\"Retrieve account's total liquidity\"},\"accountLiquidityFull(address,bool)\":{\"notice\":\"Retrieve account's liquidity per collateral\"},\"checkAccountStatus(address,address[])\":{\"notice\":\"Checks the status of an account and reverts if account is not healthy\"},\"checkVaultStatus()\":{\"notice\":\"Checks the status of the vault and reverts if caps are exceeded\"},\"disableController()\":{\"notice\":\"Release control of the account on EVC if no outstanding debt is present\"}},\"notice\":\"Interface of the EVault's RiskManager module\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/euler-vault-kit/src/EVault/IEVault.sol\":\"IRiskManager\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":ethereum-vault-connector/=lib/ethereum-vault-connector/src/\",\":euler-vault-kit/=lib/euler-vault-kit/\",\":evc/=lib/ethereum-vault-connector/src/\",\":evk-test/=lib/euler-vault-kit/test/\",\":evk/=lib/euler-vault-kit/src/\",\":forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/euler-vault-kit/lib/permit2/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/\"]},\"sources\":{\"lib/ethereum-vault-connector/src/interfaces/IVault.sol\":{\"keccak256\":\"0xb04fe66deccf8baa3e5c850f2ecf32e948393d7a42e78b59b037141b205edf42\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://11acaad66e9a42deec1f9328abe9f2662bfb109568baa20a79317ae707b94016\",\"dweb:/ipfs/QmQbAtvrk9cqXJJZgMRjdxrMDXiZPz37m6PGZYEpbtN8to\"]},\"lib/euler-vault-kit/src/EVault/IEVault.sol\":{\"keccak256\":\"0x1e41f0fe57683c65b27afa6b725ee2c68128b540f682bba93e2dc135522ac6b3\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://86bb1872eb9073214b853663fb136157bea709bbcf626bb0a2bb2748a43f941d\",\"dweb:/ipfs/QmSWQPjHBBahLM3AsoVjHHYEBiBj8WbkQqCQLPNUJVMX1k\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bool","name":"liquidation","type":"bool"}],"stateMutability":"view","type":"function","name":"accountLiquidity","outputs":[{"internalType":"uint256","name":"collateralValue","type":"uint256"},{"internalType":"uint256","name":"liabilityValue","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bool","name":"liquidation","type":"bool"}],"stateMutability":"view","type":"function","name":"accountLiquidityFull","outputs":[{"internalType":"address[]","name":"collaterals","type":"address[]"},{"internalType":"uint256[]","name":"collateralValues","type":"uint256[]"},{"internalType":"uint256","name":"liabilityValue","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address[]","name":"collaterals","type":"address[]"}],"stateMutability":"view","type":"function","name":"checkAccountStatus","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"checkVaultStatus","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"disableController"}],"devdoc":{"kind":"dev","methods":{"accountLiquidity(address,bool)":{"params":{"account":"Account holding debt in this vault","liquidation":"Flag to indicate if the calculation should be performed in liquidation vs account status check mode, where different LTV values might apply."},"returns":{"collateralValue":"Total risk adjusted value of all collaterals in unit of account","liabilityValue":"Value of debt in unit of account"}},"accountLiquidityFull(address,bool)":{"params":{"account":"Account holding debt in this vault","liquidation":"Flag to indicate if the calculation should be performed in liquidation vs account status check mode, where different LTV values might apply."},"returns":{"collateralValues":"Array of risk adjusted collateral values corresponding to items in collaterals array. In unit of account","collaterals":"Array of collaterals enabled","liabilityValue":"Value of debt in unit of account"}},"checkAccountStatus(address,address[])":{"details":"Only callable by EVC during status checks","params":{"account":"The address of the account to be checked"},"returns":{"_0":"magicValue Must return the bytes4 magic value 0xb168c58f (which is a selector of this function) when account status is valid, or revert otherwise."}},"checkVaultStatus()":{"details":"Only callable by EVC during status checks","returns":{"_0":"magicValue Must return the bytes4 magic value 0x4b3d1223 (which is a selector of this function) when account status is valid, or revert otherwise."}}},"version":1},"userdoc":{"kind":"user","methods":{"accountLiquidity(address,bool)":{"notice":"Retrieve account's total liquidity"},"accountLiquidityFull(address,bool)":{"notice":"Retrieve account's liquidity per collateral"},"checkAccountStatus(address,address[])":{"notice":"Checks the status of an account and reverts if account is not healthy"},"checkVaultStatus()":{"notice":"Checks the status of the vault and reverts if caps are exceeded"},"disableController()":{"notice":"Release control of the account on EVC if no outstanding debt is present"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","ethereum-vault-connector/=lib/ethereum-vault-connector/src/","euler-vault-kit/=lib/euler-vault-kit/","evc/=lib/ethereum-vault-connector/src/","evk-test/=lib/euler-vault-kit/test/","evk/=lib/euler-vault-kit/src/","forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/","permit2/=lib/euler-vault-kit/lib/permit2/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/euler-vault-kit/src/EVault/IEVault.sol":"IRiskManager"},"evmVersion":"prague","libraries":{}},"sources":{"lib/ethereum-vault-connector/src/interfaces/IVault.sol":{"keccak256":"0xb04fe66deccf8baa3e5c850f2ecf32e948393d7a42e78b59b037141b205edf42","urls":["bzz-raw://11acaad66e9a42deec1f9328abe9f2662bfb109568baa20a79317ae707b94016","dweb:/ipfs/QmQbAtvrk9cqXJJZgMRjdxrMDXiZPz37m6PGZYEpbtN8to"],"license":"GPL-2.0-or-later"},"lib/euler-vault-kit/src/EVault/IEVault.sol":{"keccak256":"0x1e41f0fe57683c65b27afa6b725ee2c68128b540f682bba93e2dc135522ac6b3","urls":["bzz-raw://86bb1872eb9073214b853663fb136157bea709bbcf626bb0a2bb2748a43f941d","dweb:/ipfs/QmSWQPjHBBahLM3AsoVjHHYEBiBj8WbkQqCQLPNUJVMX1k"],"license":"GPL-2.0-or-later"}},"version":1},"id":2}