{"abi":[{"type":"function","name":"activate","inputs":[{"name":"initialState","type":"tuple","internalType":"struct IEulerSwap.InitialState","components":[{"name":"currReserve0","type":"uint112","internalType":"uint112"},{"name":"currReserve1","type":"uint112","internalType":"uint112"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"computeQuote","inputs":[{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"exactIn","type":"bool","internalType":"bool"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAssets","inputs":[],"outputs":[{"name":"asset0","type":"address","internalType":"address"},{"name":"asset1","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getLimits","inputs":[{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"}],"outputs":[{"name":"limitIn","type":"uint256","internalType":"uint256"},{"name":"limitOut","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getParams","inputs":[],"outputs":[{"name":"","type":"tuple","internalType":"struct IEulerSwap.Params","components":[{"name":"vault0","type":"address","internalType":"address"},{"name":"vault1","type":"address","internalType":"address"},{"name":"eulerAccount","type":"address","internalType":"address"},{"name":"equilibriumReserve0","type":"uint112","internalType":"uint112"},{"name":"equilibriumReserve1","type":"uint112","internalType":"uint112"},{"name":"priceX","type":"uint256","internalType":"uint256"},{"name":"priceY","type":"uint256","internalType":"uint256"},{"name":"concentrationX","type":"uint256","internalType":"uint256"},{"name":"concentrationY","type":"uint256","internalType":"uint256"},{"name":"fee","type":"uint256","internalType":"uint256"},{"name":"protocolFee","type":"uint256","internalType":"uint256"},{"name":"protocolFeeRecipient","type":"address","internalType":"address"}]}],"stateMutability":"view"},{"type":"function","name":"getReserves","inputs":[],"outputs":[{"name":"reserve0","type":"uint112","internalType":"uint112"},{"name":"reserve1","type":"uint112","internalType":"uint112"},{"name":"status","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"swap","inputs":[{"name":"amount0Out","type":"uint256","internalType":"uint256"},{"name":"amount1Out","type":"uint256","internalType":"uint256"},{"name":"to","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"activate((uint112,uint112))":"536aeb72","computeQuote(address,address,uint256,bool)":"8e0dc28d","getAssets()":"67e4ac2c","getLimits(address,address)":"aaed87a3","getParams()":"5e615a6b","getReserves()":"0902f1ac","swap(uint256,uint256,address,bytes)":"022c0d9f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"currReserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"currReserve1\",\"type\":\"uint112\"}],\"internalType\":\"struct IEulerSwap.InitialState\",\"name\":\"initialState\",\"type\":\"tuple\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exactIn\",\"type\":\"bool\"}],\"name\":\"computeQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limitIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParams\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eulerAccount\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"equilibriumReserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"equilibriumReserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"priceX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"concentrationX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"concentrationY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"internalType\":\"struct IEulerSwap.Params\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"status\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeQuote(address,address,uint256,bool)\":{\"params\":{\"amount\":\"The quantity of input or output tokens, for exact input and exact output swaps respectively\",\"exactIn\":\"True if this is an exact input swap, false if exact output\",\"tokenIn\":\"The input token that the swapper SENDS\",\"tokenOut\":\"The output token that the swapper GETS\"},\"returns\":{\"_0\":\"The quoted quantity of output or input tokens, for exact input and exact output swaps respectively\"}},\"getLimits(address,address)\":{\"returns\":{\"limitIn\":\"Max amount of `tokenIn` that can be sold.\",\"limitOut\":\"Max amount of `tokenOut` that can be bought.\"}},\"getReserves()\":{\"returns\":{\"reserve0\":\"The amount of asset0 in the pool\",\"reserve1\":\"The amount of asset1 in the pool\",\"status\":\"The status of the pool (0 = unactivated, 1 = unlocked, 2 = locked)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activate((uint112,uint112))\":{\"notice\":\"Performs initial activation setup, such as approving vaults to access the EulerSwap instance's tokens, enabling vaults as collateral, setting up Uniswap hooks, etc. This should only be invoked by the factory.\"},\"computeQuote(address,address,uint256,bool)\":{\"notice\":\"Generates a quote for how much a given size swap will cost.\"},\"getAssets()\":{\"notice\":\"Retrieves the underlying assets supported by this pool.\"},\"getLimits(address,address)\":{\"notice\":\"Upper-bounds on the amounts of each token that this pool can currently support swaps for.\"},\"getParams()\":{\"notice\":\"Retrieves the pool's immutable parameters.\"},\"getReserves()\":{\"notice\":\"Retrieves the current reserves from storage, along with the pool's lock status.\"},\"swap(uint256,uint256,address,bytes)\":{\"notice\":\"Optimistically sends the requested amounts of tokens to the `to` address, invokes `eulerSwapCall` callback on `to` (if `data` was provided), and then verifies that a sufficient amount of tokens were transferred to satisfy the swapping curve invariant.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IEulerSwap.sol\":\"IEulerSwap\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":ethereum-vault-connector/=lib/ethereum-vault-connector/src/\",\":euler-vault-kit/=lib/euler-vault-kit/\",\":evc/=lib/ethereum-vault-connector/src/\",\":evk-test/=lib/euler-vault-kit/test/\",\":evk/=lib/euler-vault-kit/src/\",\":forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/euler-vault-kit/lib/permit2/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/\"]},\"sources\":{\"src/interfaces/IEulerSwap.sol\":{\"keccak256\":\"0xc989af283509dde675be33cdd281afe8957d1fde86597c8e7101b60f9ac1eb47\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7db603bf80f87ca5f699d696aa320e43b11bbb965742dc1f7dd54b215cb0355\",\"dweb:/ipfs/QmNQm4puVWLPTbkAho8Wdnxiy1XfdJrX79WYdgQNRtGtHw\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct IEulerSwap.InitialState","name":"initialState","type":"tuple","components":[{"internalType":"uint112","name":"currReserve0","type":"uint112"},{"internalType":"uint112","name":"currReserve1","type":"uint112"}]}],"stateMutability":"nonpayable","type":"function","name":"activate"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"exactIn","type":"bool"}],"stateMutability":"view","type":"function","name":"computeQuote","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getAssets","outputs":[{"internalType":"address","name":"asset0","type":"address"},{"internalType":"address","name":"asset1","type":"address"}]},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"}],"stateMutability":"view","type":"function","name":"getLimits","outputs":[{"internalType":"uint256","name":"limitIn","type":"uint256"},{"internalType":"uint256","name":"limitOut","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getParams","outputs":[{"internalType":"struct IEulerSwap.Params","name":"","type":"tuple","components":[{"internalType":"address","name":"vault0","type":"address"},{"internalType":"address","name":"vault1","type":"address"},{"internalType":"address","name":"eulerAccount","type":"address"},{"internalType":"uint112","name":"equilibriumReserve0","type":"uint112"},{"internalType":"uint112","name":"equilibriumReserve1","type":"uint112"},{"internalType":"uint256","name":"priceX","type":"uint256"},{"internalType":"uint256","name":"priceY","type":"uint256"},{"internalType":"uint256","name":"concentrationX","type":"uint256"},{"internalType":"uint256","name":"concentrationY","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"uint256","name":"protocolFee","type":"uint256"},{"internalType":"address","name":"protocolFeeRecipient","type":"address"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getReserves","outputs":[{"internalType":"uint112","name":"reserve0","type":"uint112"},{"internalType":"uint112","name":"reserve1","type":"uint112"},{"internalType":"uint32","name":"status","type":"uint32"}]},{"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"swap"}],"devdoc":{"kind":"dev","methods":{"computeQuote(address,address,uint256,bool)":{"params":{"amount":"The quantity of input or output tokens, for exact input and exact output swaps respectively","exactIn":"True if this is an exact input swap, false if exact output","tokenIn":"The input token that the swapper SENDS","tokenOut":"The output token that the swapper GETS"},"returns":{"_0":"The quoted quantity of output or input tokens, for exact input and exact output swaps respectively"}},"getLimits(address,address)":{"returns":{"limitIn":"Max amount of `tokenIn` that can be sold.","limitOut":"Max amount of `tokenOut` that can be bought."}},"getReserves()":{"returns":{"reserve0":"The amount of asset0 in the pool","reserve1":"The amount of asset1 in the pool","status":"The status of the pool (0 = unactivated, 1 = unlocked, 2 = locked)"}}},"version":1},"userdoc":{"kind":"user","methods":{"activate((uint112,uint112))":{"notice":"Performs initial activation setup, such as approving vaults to access the EulerSwap instance's tokens, enabling vaults as collateral, setting up Uniswap hooks, etc. This should only be invoked by the factory."},"computeQuote(address,address,uint256,bool)":{"notice":"Generates a quote for how much a given size swap will cost."},"getAssets()":{"notice":"Retrieves the underlying assets supported by this pool."},"getLimits(address,address)":{"notice":"Upper-bounds on the amounts of each token that this pool can currently support swaps for."},"getParams()":{"notice":"Retrieves the pool's immutable parameters."},"getReserves()":{"notice":"Retrieves the current reserves from storage, along with the pool's lock status."},"swap(uint256,uint256,address,bytes)":{"notice":"Optimistically sends the requested amounts of tokens to the `to` address, invokes `eulerSwapCall` callback on `to` (if `data` was provided), and then verifies that a sufficient amount of tokens were transferred to satisfy the swapping curve invariant."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","ethereum-vault-connector/=lib/ethereum-vault-connector/src/","euler-vault-kit/=lib/euler-vault-kit/","evc/=lib/ethereum-vault-connector/src/","evk-test/=lib/euler-vault-kit/test/","evk/=lib/euler-vault-kit/src/","forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/","permit2/=lib/euler-vault-kit/lib/permit2/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IEulerSwap.sol":"IEulerSwap"},"evmVersion":"prague","libraries":{}},"sources":{"src/interfaces/IEulerSwap.sol":{"keccak256":"0xc989af283509dde675be33cdd281afe8957d1fde86597c8e7101b60f9ac1eb47","urls":["bzz-raw://e7db603bf80f87ca5f699d696aa320e43b11bbb965742dc1f7dd54b215cb0355","dweb:/ipfs/QmNQm4puVWLPTbkAho8Wdnxiy1XfdJrX79WYdgQNRtGtHw"],"license":"MIT"}},"version":1},"id":42}