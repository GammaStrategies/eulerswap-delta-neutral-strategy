{"abi":[{"type":"function","name":"getLimits","inputs":[{"name":"eulerSwap","type":"address","internalType":"address"},{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"}],"outputs":[{"name":"limitIn","type":"uint256","internalType":"uint256"},{"name":"limitOut","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"quoteExactInput","inputs":[{"name":"eulerSwap","type":"address","internalType":"address"},{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amountIn","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"quoteExactOutput","inputs":[{"name":"eulerSwap","type":"address","internalType":"address"},{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amountOut","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"swapExactIn","inputs":[{"name":"eulerSwap","type":"address","internalType":"address"},{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amountIn","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"amountOutMin","type":"uint256","internalType":"uint256"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"swapExactOut","inputs":[{"name":"eulerSwap","type":"address","internalType":"address"},{"name":"tokenIn","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"address"},{"name":"amountOut","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"amountInMax","type":"uint256","internalType":"uint256"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getLimits(address,address,address)":"664b8d7a","quoteExactInput(address,address,address,uint256)":"534eaf0f","quoteExactOutput(address,address,address,uint256)":"995d61aa","swapExactIn(address,address,address,uint256,address,uint256,uint256)":"65202c09","swapExactOut(address,address,address,uint256,address,uint256,uint256)":"5d10bc22"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eulerSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limitIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eulerSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eulerSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eulerSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eulerSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLimits(address,address,address)\":{\"returns\":{\"limitIn\":\"Max amount of `tokenIn` that can be sold.\",\"limitOut\":\"Max amount of `tokenOut` that can be bought.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLimits(address,address,address)\":{\"notice\":\"Upper-bounds on the amounts of each token that this pool can currently support swaps for.\"},\"quoteExactInput(address,address,address,uint256)\":{\"notice\":\"How much `tokenOut` can I get for `amountIn` of `tokenIn`?\"},\"quoteExactOutput(address,address,address,uint256)\":{\"notice\":\"How much `tokenIn` do I need to get `amountOut` of `tokenOut`?\"},\"swapExactIn(address,address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Swap `amountIn` of `tokenIn` for `tokenOut`, with at least `amountOutMin` received. Output tokens are sent to `receiver`. The swap will fail after `deadline` (unless `deadline` is 0). IMPORTANT: `eulerSwap` must be a trusted contract, for example created by a trusted factory.\"},\"swapExactOut(address,address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Swap `amountOut` of `tokenOut` for `tokenIn`, with at most `amountInMax` paid. Output tokens are sent to `receiver`. The swap will fail after `deadline` (unless `deadline` is 0). IMPORTANT: `eulerSwap` must be a trusted contract, for example created by a trusted factory.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IEulerSwapPeriphery.sol\":\"IEulerSwapPeriphery\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":ethereum-vault-connector/=lib/ethereum-vault-connector/src/\",\":euler-vault-kit/=lib/euler-vault-kit/\",\":evc/=lib/ethereum-vault-connector/src/\",\":evk-test/=lib/euler-vault-kit/test/\",\":evk/=lib/euler-vault-kit/src/\",\":forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/euler-vault-kit/lib/permit2/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/\"]},\"sources\":{\"src/interfaces/IEulerSwapPeriphery.sol\":{\"keccak256\":\"0x596e12c8e671a961f3f5a0e3c1d9fac2554ee1b43fc749292e9ae49e07f73110\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://375b0e63a7776ca5371e56efd0e2b9cb9e21730391478ca7bfeb27e12090dfb3\",\"dweb:/ipfs/QmZdMsXQSQue4uxAznkdqHKsWdexYt2kUN1S7yxcvV9bWz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"eulerSwap","type":"address"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"}],"stateMutability":"view","type":"function","name":"getLimits","outputs":[{"internalType":"uint256","name":"limitIn","type":"uint256"},{"internalType":"uint256","name":"limitOut","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"eulerSwap","type":"address"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"view","type":"function","name":"quoteExactInput","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"eulerSwap","type":"address"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"view","type":"function","name":"quoteExactOutput","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"eulerSwap","type":"address"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"swapExactIn"},{"inputs":[{"internalType":"address","name":"eulerSwap","type":"address"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amountInMax","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"swapExactOut"}],"devdoc":{"kind":"dev","methods":{"getLimits(address,address,address)":{"returns":{"limitIn":"Max amount of `tokenIn` that can be sold.","limitOut":"Max amount of `tokenOut` that can be bought."}}},"version":1},"userdoc":{"kind":"user","methods":{"getLimits(address,address,address)":{"notice":"Upper-bounds on the amounts of each token that this pool can currently support swaps for."},"quoteExactInput(address,address,address,uint256)":{"notice":"How much `tokenOut` can I get for `amountIn` of `tokenIn`?"},"quoteExactOutput(address,address,address,uint256)":{"notice":"How much `tokenIn` do I need to get `amountOut` of `tokenOut`?"},"swapExactIn(address,address,address,uint256,address,uint256,uint256)":{"notice":"Swap `amountIn` of `tokenIn` for `tokenOut`, with at least `amountOutMin` received. Output tokens are sent to `receiver`. The swap will fail after `deadline` (unless `deadline` is 0). IMPORTANT: `eulerSwap` must be a trusted contract, for example created by a trusted factory."},"swapExactOut(address,address,address,uint256,address,uint256,uint256)":{"notice":"Swap `amountOut` of `tokenOut` for `tokenIn`, with at most `amountInMax` paid. Output tokens are sent to `receiver`. The swap will fail after `deadline` (unless `deadline` is 0). IMPORTANT: `eulerSwap` must be a trusted contract, for example created by a trusted factory."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","ethereum-vault-connector/=lib/ethereum-vault-connector/src/","euler-vault-kit/=lib/euler-vault-kit/","evc/=lib/ethereum-vault-connector/src/","evk-test/=lib/euler-vault-kit/test/","evk/=lib/euler-vault-kit/src/","forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/","permit2/=lib/euler-vault-kit/lib/permit2/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IEulerSwapPeriphery.sol":"IEulerSwapPeriphery"},"evmVersion":"prague","libraries":{}},"sources":{"src/interfaces/IEulerSwapPeriphery.sol":{"keccak256":"0x596e12c8e671a961f3f5a0e3c1d9fac2554ee1b43fc749292e9ae49e07f73110","urls":["bzz-raw://375b0e63a7776ca5371e56efd0e2b9cb9e21730391478ca7bfeb27e12090dfb3","dweb:/ipfs/QmZdMsXQSQue4uxAznkdqHKsWdexYt2kUN1S7yxcvV9bWz"],"license":"MIT"}},"version":1},"id":45}