{"abi":[{"type":"function","name":"checkAccountStatus","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"collaterals","type":"address[]","internalType":"address[]"}],"outputs":[{"name":"magicValue","type":"bytes4","internalType":"bytes4"}],"stateMutability":"view"},{"type":"function","name":"checkVaultStatus","inputs":[],"outputs":[{"name":"magicValue","type":"bytes4","internalType":"bytes4"}],"stateMutability":"nonpayable"},{"type":"function","name":"disableController","inputs":[],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"checkAccountStatus(address,address[])":"b168c58f","checkVaultStatus()":"4b3d1223","disableController()":"869e50c7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"collaterals\",\"type\":\"address[]\"}],\"name\":\"checkAccountStatus\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVaultStatus\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Euler Labs (https://www.eulerlabs.com/)\",\"custom:security-contact\":\"security@euler.xyz\",\"kind\":\"dev\",\"methods\":{\"checkAccountStatus(address,address[])\":{\"details\":\"This function must only deliberately revert if the account status is invalid. If this function reverts due to any other reason, it may render the account unusable with possibly no way to recover funds.\",\"params\":{\"account\":\"The address of the account to be checked.\",\"collaterals\":\"The array of enabled collateral addresses to be considered for the account status check.\"},\"returns\":{\"magicValue\":\"Must return the bytes4 magic value 0xb168c58f (which is a selector of this function) when account status is valid, or revert otherwise.\"}},\"checkVaultStatus()\":{\"details\":\"This function must only deliberately revert if the vault status is invalid. If this function reverts due to any other reason, it may render some accounts unusable with possibly no way to recover funds.\",\"returns\":{\"magicValue\":\"Must return the bytes4 magic value 0x4b3d1223 (which is a selector of this function) when account status is valid, or revert otherwise.\"}},\"disableController()\":{\"details\":\"A controller is a vault that has been chosen for an account to have special control over account\\u2019s balances in the enabled collaterals vaults. User calls this function in order for the vault to disable itself for the account if the conditions are met (i.e. user has repaid debt in full). If the conditions are not met, the function reverts.\"}},\"title\":\"IVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAccountStatus(address,address[])\":{\"notice\":\"Checks the status of an account.\"},\"checkVaultStatus()\":{\"notice\":\"Checks the status of the vault.\"},\"disableController()\":{\"notice\":\"Disables a controller (this vault) for the authenticated account.\"}},\"notice\":\"This interface defines the methods for the Vault for the purpose of integration with the Ethereum Vault Connector.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/ethereum-vault-connector/src/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":ethereum-vault-connector/=lib/ethereum-vault-connector/src/\",\":euler-vault-kit/=lib/euler-vault-kit/\",\":evc/=lib/ethereum-vault-connector/src/\",\":evk-test/=lib/euler-vault-kit/test/\",\":evk/=lib/euler-vault-kit/src/\",\":forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/\",\":permit2/=lib/euler-vault-kit/lib/permit2/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/\"]},\"sources\":{\"lib/ethereum-vault-connector/src/interfaces/IVault.sol\":{\"keccak256\":\"0xb04fe66deccf8baa3e5c850f2ecf32e948393d7a42e78b59b037141b205edf42\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://11acaad66e9a42deec1f9328abe9f2662bfb109568baa20a79317ae707b94016\",\"dweb:/ipfs/QmQbAtvrk9cqXJJZgMRjdxrMDXiZPz37m6PGZYEpbtN8to\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address[]","name":"collaterals","type":"address[]"}],"stateMutability":"view","type":"function","name":"checkAccountStatus","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"checkVaultStatus","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"disableController"}],"devdoc":{"kind":"dev","methods":{"checkAccountStatus(address,address[])":{"details":"This function must only deliberately revert if the account status is invalid. If this function reverts due to any other reason, it may render the account unusable with possibly no way to recover funds.","params":{"account":"The address of the account to be checked.","collaterals":"The array of enabled collateral addresses to be considered for the account status check."},"returns":{"magicValue":"Must return the bytes4 magic value 0xb168c58f (which is a selector of this function) when account status is valid, or revert otherwise."}},"checkVaultStatus()":{"details":"This function must only deliberately revert if the vault status is invalid. If this function reverts due to any other reason, it may render some accounts unusable with possibly no way to recover funds.","returns":{"magicValue":"Must return the bytes4 magic value 0x4b3d1223 (which is a selector of this function) when account status is valid, or revert otherwise."}},"disableController()":{"details":"A controller is a vault that has been chosen for an account to have special control over accountâ€™s balances in the enabled collaterals vaults. User calls this function in order for the vault to disable itself for the account if the conditions are met (i.e. user has repaid debt in full). If the conditions are not met, the function reverts."}},"version":1},"userdoc":{"kind":"user","methods":{"checkAccountStatus(address,address[])":{"notice":"Checks the status of an account."},"checkVaultStatus()":{"notice":"Checks the status of the vault."},"disableController()":{"notice":"Disables a controller (this vault) for the authenticated account."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","ethereum-vault-connector/=lib/ethereum-vault-connector/src/","euler-vault-kit/=lib/euler-vault-kit/","evc/=lib/ethereum-vault-connector/src/","evk-test/=lib/euler-vault-kit/test/","evk/=lib/euler-vault-kit/src/","forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/","permit2/=lib/euler-vault-kit/lib/permit2/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/ethereum-vault-connector/src/interfaces/IVault.sol":"IVault"},"evmVersion":"prague","libraries":{}},"sources":{"lib/ethereum-vault-connector/src/interfaces/IVault.sol":{"keccak256":"0xb04fe66deccf8baa3e5c850f2ecf32e948393d7a42e78b59b037141b205edf42","urls":["bzz-raw://11acaad66e9a42deec1f9328abe9f2662bfb109568baa20a79317ae707b94016","dweb:/ipfs/QmQbAtvrk9cqXJJZgMRjdxrMDXiZPz37m6PGZYEpbtN8to"],"license":"GPL-2.0-or-later"}},"version":1},"id":1}